name: Release PR Workflow

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  PRISMA_CLIENT_ENGINE_TYPE: wasm

jobs:
  # Build and test the release candidate
  build-and-test:
    runs-on: ubuntu-latest
    if: github.event.pull_request.state == 'open'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:ci
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

    - name: Run smoke tests
      run: |
        npm start &
        sleep 30
        curl -f http://localhost:3000/api/health || exit 1
        curl -f http://localhost:3000/api/health/readiness || exit 1
        curl -f http://localhost:3000/api/health/liveness || exit 1
      env:
        NODE_ENV: production
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

    - name: Generate bundle report
      run: npm run bundle:analyze

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          .next/
          bundle-analysis-report.json
        retention-days: 7

  # Check migration status
  migration-check:
    runs-on: ubuntu-latest
    if: github.event.pull_request.state == 'open'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for pending migrations
      run: |
        npx prisma migrate status
        if [ $? -ne 0 ]; then
          echo "::warning::Pending migrations detected"
          echo "MIGRATION_PENDING=true" >> $GITHUB_ENV
        else
          echo "MIGRATION_PENDING=false" >> $GITHUB_ENV
        fi

    - name: Comment on PR about migrations
      if: env.MIGRATION_PENDING == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '⚠️ **Migration Required**: This PR contains database migrations. Please add the `run-backfill` label to trigger migration backfill after merge.'
          })

  # Create release when PR is merged
  create-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    needs: [build-and-test, migration-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Generate CHANGELOG
      run: |
        # Extract conventional commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --grep="^feat\|^fix\|^perf\|^refactor\|^docs\|^style\|^test\|^chore\|^ci\|^build\|^revert")
        else
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --grep="^feat\|^fix\|^perf\|^refactor\|^docs\|^style\|^test\|^chore\|^ci\|^build\|^revert")
        fi
        
        # Create CHANGELOG entry
        cat > CHANGELOG_ENTRY.md << EOF
        ## [Unreleased]
        
        ### Added
        $(echo "$COMMITS" | grep "^- feat" || echo "No new features")
        
        ### Changed
        $(echo "$COMMITS" | grep "^- refactor\|^- perf" || echo "No changes")
        
        ### Fixed
        $(echo "$COMMITS" | grep "^- fix" || echo "No bug fixes")
        
        ### Other
        $(echo "$COMMITS" | grep "^- docs\|^- style\|^- test\|^- chore\|^- ci\|^- build" || echo "No other changes")
        EOF

    - name: Bump version
      run: |
        # Determine version bump type
        COMMITS=$(git log --pretty=format:"%s" --grep="^feat\|^fix\|^perf\|^refactor\|^docs\|^style\|^test\|^chore\|^ci\|^build\|^revert" -n 10)
        
        if echo "$COMMITS" | grep -q "^feat"; then
          VERSION_TYPE="minor"
        elif echo "$COMMITS" | grep -q "^fix"; then
          VERSION_TYPE="patch"
        else
          VERSION_TYPE="patch"
        fi
        
        # Bump version
        npm version $VERSION_TYPE --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Create Git tag
      run: |
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ env.NEW_VERSION }}"
        git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
        git push origin main
        git push origin "v${{ env.NEW_VERSION }}"

    - name: Generate release artifacts
      run: |
        # Generate environment matrix
        cat > env-matrix.json << EOF
        {
          "production": {
            "NODE_ENV": "production",
            "PRISMA_CLIENT_ENGINE_TYPE": "wasm",
            "SUPABASE_REF": "ghqyxhbyyirveptgwoqm"
          },
          "preview": {
            "NODE_ENV": "preview",
            "PRISMA_CLIENT_ENGINE_TYPE": "wasm",
            "SUPABASE_REF": "ghqyxhbyyirveptgwoqm"
          }
        }
        EOF
        
        # Generate schema hash
        SCHEMA_HASH=$(find supabase -name "*.sql" -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
        echo "SCHEMA_HASH=$SCHEMA_HASH" >> $GITHUB_ENV
        
        # Generate build SHA
        BUILD_SHA=$(git rev-parse HEAD)
        echo "BUILD_SHA=$BUILD_SHA" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          ## Changes
          $(cat CHANGELOG_ENTRY.md)
          
          ## Release Artifacts
          - **Environment Matrix**: [env-matrix.json](https://github.com/${{ github.repository }}/releases/download/v${{ env.NEW_VERSION }}/env-matrix.json)
          - **Schema Hash**: `${{ env.SCHEMA_HASH }}`
          - **Build SHA**: `${{ env.BUILD_SHA }}`
          - **Bundle Report**: [bundle-analysis-report.json](https://github.com/${{ github.repository }}/releases/download/v${{ env.NEW_VERSION }}/bundle-analysis-report.json)
          
          ## Deployment
          - [ ] Deploy to Preview
          - [ ] Run migration backfill (if needed)
          - [ ] Promote to Production
        draft: false
        prerelease: false

    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./env-matrix.json
        asset_name: env-matrix.json
        asset_content_type: application/json

    - name: Comment on merged PR
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🎉 **Release Created**: [v${{ env.NEW_VERSION }}](https://github.com/${{ github.repository }}/releases/tag/v${{ env.NEW_VERSION }})
            
            **Schema Hash**: \`${{ env.SCHEMA_HASH }}\`
            **Build SHA**: \`${{ env.BUILD_SHA }}\`
            
            Next steps:
            1. Deploy to Preview environment
            2. Run migration backfill if needed (add \`run-backfill\` label)
            3. Promote to Production when ready`
          })
