name: AI Audit & Health Monitoring

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_analysis:
        description: 'Force analysis even if recently run'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  health-monitoring:
    name: AI Health Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build:core

      - name: Run AI Self-Diagnosis
        run: npx ts-node ai/self_diagnose.ts
        env:
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ env.SUPABASE_SERVICE_KEY }}
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}

      - name: Generate Health Summary
        id: health-summary
        run: |
          npx ts-node -e "
          const { AISelfDiagnose } = require('./ai/self_diagnose.ts');
          const diagnoser = new AISelfDiagnose();
          diagnoser.getHealthSummary().then(summary => {
            console.log('HEALTH_SUMMARY<<EOF');
            console.log(JSON.stringify(summary, null, 2));
            console.log('EOF');
          });
          "

      - name: Comment on PR (if triggered by PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `${{ steps.health-summary.outputs.HEALTH_SUMMARY }}`;
            const parsed = JSON.parse(summary);
            
            const comment = `## ü§ñ AI Health Report
            
            **Status:** ${parsed.critical_issues > 0 ? '‚ö†Ô∏è Issues Detected' : '‚úÖ Healthy'}
            **Critical Issues:** ${parsed.critical_issues}
            **Warnings:** ${parsed.warnings}
            **Average Response Time:** ${parsed.avg_response_time?.toFixed(2) || 'N/A'}ms
            **Error Rate:** ${parsed.error_rate?.toFixed(2) || 'N/A'}%
            
            ### Recommendations
            ${parsed.recommendations?.map(rec => `- ${rec}`).join('\n') || 'No recommendations'}
            
            ---
            *Generated by AI Health Monitoring System*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  insights-analysis:
    name: AI Insights Analysis
    runs-on: ubuntu-latest
    needs: health-monitoring
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run AI Insights Analysis
        run: node ai/insights_agent.mjs ${{ github.event.number || '1' }} ${{ github.sha }}
        env:
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ env.SUPABASE_SERVICE_KEY }}
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}

  future-runtime-check:
    name: Future Runtime Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Future Runtime Check
        run: npx ts-node scripts/futurecheck.ts

      - name: Upload Future Check Report
        uses: actions/upload-artifact@v4
        with:
          name: futurecheck-report
          path: futurecheck-report.md

      - name: Comment Future Check Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('futurecheck-report.md', 'utf8');
            
            const comment = `## üåç Future Runtime Compatibility Check
            
            ${report}
            
            ---
            *Generated by Future Runtime Checker*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  privacy-compliance:
    name: Privacy Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Privacy Audit
        run: npx ts-node ai/privacy_guard.ts audit

      - name: Generate Privacy Report
        run: |
          npx ts-node -e "
          const { PrivacyGuard } = require('./ai/privacy_guard.ts');
          const guard = new PrivacyGuard();
          guard.generateComplianceReport().then(report => {
            require('fs').writeFileSync('privacy-report.md', report);
          });
          "

      - name: Upload Privacy Report
        uses: actions/upload-artifact@v4
        with:
          name: privacy-report
          path: privacy-report.md

      - name: Comment Privacy Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('privacy-report.md', 'utf8');
            
            const comment = `## üîí Privacy Compliance Check
            
            ${report}
            
            ---
            *Generated by Privacy Guard System*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  cost-analysis:
    name: Cost Analysis & Auto-Scaling
    runs-on: ubuntu-latest
    needs: [health-monitoring]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Cost Analysis
        run: npx ts-node ai/ai_autoscale.ts
        env:
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ env.SUPABASE_SERVICE_KEY }}
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}

  embeddings-update:
    name: Update AI Embeddings
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update Documentation Embeddings
        run: node scripts/generate-embeddings.mjs --type docs --namespace documentation

      - name: Update Product Embeddings
        run: node scripts/generate-embeddings.mjs --type product --namespace product

      - name: Cleanup Old Embeddings
        run: node scripts/generate-embeddings.mjs --cleanup --namespace documentation

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [health-monitoring, insights-analysis, future-runtime-check, privacy-compliance, cost-analysis]
    if: always()

    steps:
      - name: Notify on Success
        if: ${{ needs.health-monitoring.result == 'success' && needs.insights-analysis.result == 'success' }}
        run: |
          echo "‚úÖ All AI audit checks passed successfully"
          echo "Health monitoring: ${{ needs.health-monitoring.result }}"
          echo "Insights analysis: ${{ needs.insights-analysis.result }}"
          echo "Future runtime check: ${{ needs.future-runtime-check.result }}"
          echo "Privacy compliance: ${{ needs.privacy-compliance.result }}"
          echo "Cost analysis: ${{ needs.cost-analysis.result }}"

      - name: Notify on Failure
        if: ${{ needs.health-monitoring.result == 'failure' || needs.insights-analysis.result == 'failure' }}
        run: |
          echo "‚ùå Some AI audit checks failed"
          echo "Health monitoring: ${{ needs.health-monitoring.result }}"
          echo "Insights analysis: ${{ needs.insights-analysis.result }}"
          echo "Future runtime check: ${{ needs.future-runtime-check.result }}"
          echo "Privacy compliance: ${{ needs.privacy-compliance.result }}"
          echo "Cost analysis: ${{ needs.cost-analysis.result }}"
          exit 1